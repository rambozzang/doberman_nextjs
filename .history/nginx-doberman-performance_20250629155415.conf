# 성능 최적화된 Nginx 설정 - doberman.kr
# 접속 문제 해결을 위한 고성능 설정

# 업스트림 설정 - 연결 풀링 및 로드밸런싱 최적화
upstream nextjs_backend {
    # 여러 포트로 확장 가능하도록 설정
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s backup;
    
    # 연결 풀링 최적화
    keepalive 128;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# HTTP에서 HTTPS로 리다이렉트
server {
    listen 80;
    server_name www.doberman.kr doberman.kr;
    
    # HTTP에서 HTTPS로 즉시 리다이렉트
    return 301 https://$server_name$request_uri;
}

# HTTPS 메인 서버
server {
    listen 443 ssl http2;
    server_name www.doberman.kr doberman.kr;

    # 로그 설정
    access_log /data/logs/www.doberman.kr.access.log;
    error_log /data/logs/www.doberman.kr.error.log;

    # 클라이언트 설정 최적화
    client_max_body_size 512M;
    client_body_buffer_size 256k;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/doberman.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/doberman.kr/privkey.pem;

    # SSL 성능 최적화
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    
    # 현대적 암호화 스위트
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;

    # 보안 헤더
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip 압축 최적화
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/wasm;

    # 메인 프록시 설정 - 성능 최적화
    location / {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        
        # WebSocket 지원
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        
        # 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 타임아웃 설정 - 접속 문제 해결을 위해 증가
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # 캐시 설정
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 버퍼링 최적화
        proxy_buffering on;
        proxy_buffer_size 256k;
        proxy_buffers 8 256k;
        proxy_busy_buffers_size 512k;
        proxy_temp_file_write_size 512k;
        
        # 에러 처리 및 재시도
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;
        
        # 연결 재사용
        proxy_set_header Connection "";
    }

    # Next.js 정적 파일 최적화
    location /_next/static/ {
        proxy_pass http://nextjs_backend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # 정적 파일은 빠른 타임아웃
        proxy_connect_timeout 5s;
        proxy_read_timeout 30s;
    }

    # 이미지 파일 최적화
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
        proxy_pass http://nextjs_backend;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        access_log off;
        
        # 이미지도 빠른 타임아웃
        proxy_connect_timeout 5s;
        proxy_read_timeout 30s;
    }

    # API 라우트 - 캐시 없음, 긴 타임아웃
    location /api/ {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API는 더 긴 타임아웃
        proxy_connect_timeout 15s;
        proxy_send_timeout 180s;
        proxy_read_timeout 180s;
        
        # 캐시 비활성화
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        # API 에러 처리
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
    }

    # 헬스체크 엔드포인트
    location /health {
        proxy_pass http://nextjs_backend;
        access_log off;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
    }

    # 실시간 모니터링 엔드포인트
    location /api/health {
        proxy_pass http://nextjs_backend;
        access_log off;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
    }

    # 보안: 숨겨진 파일 차단
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 에러 페이지
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # 404를 Next.js로 전달
    error_page 404 = @nextjs;
    location @nextjs {
        proxy_pass http://nextjs_backend;
    }
} 