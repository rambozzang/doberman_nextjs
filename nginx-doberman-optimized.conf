# 최적화된 Nginx 설정 - doberman.kr
# 기존 설정을 기반으로 보안 및 성능 개선

# 업스트림 설정 - 연결 풀링으로 성능 향상
upstream nextjs_backend {
    server 127.0.0.1:3000;
    keepalive 64;
}

# HTTP에서 HTTPS로 리다이렉트
server {
    listen 80;
    server_name www.doberman.kr doberman.kr;
    
    # HTTP에서 HTTPS로 강제 리다이렉트
    return 301 https://$server_name$request_uri;
}

# HTTPS 서버 설정
server {
    listen 443 ssl http2;
    server_name www.doberman.kr doberman.kr;

    # 로그 설정
    access_log /data/logs/www.doberman.kr.access.log;
    error_log /data/logs/www.doberman.kr.error.log;

    # 파일 업로드 크기 제한
    client_max_body_size 512M;
    
    # 클라이언트 버퍼 최적화
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/doberman.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/doberman.kr/privkey.pem;

    # SSL 보안 설정 (현대적이고 안전한 설정)
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # 최신 TLS 프로토콜만 사용 (보안 강화)
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # 강력한 암호화 스위트
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # OCSP Stapling 활성화
    ssl_stapling on;
    ssl_stapling_verify on;

    # 보안 헤더 설정
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://pagead2.googlesyndication.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-src 'self' https:;" always;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Next.js 애플리케이션으로 프록시 (최적화된 설정)
    location / {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 타임아웃 설정 최적화
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 캐시 설정
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 버퍼링 최적화
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # 에러 처리
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    }

    # Next.js 정적 파일 최적화 (빌드된 파일)
    location /_next/static/ {
        proxy_pass http://nextjs_backend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        access_log off;
    }

    # 공개 정적 파일 (이미지, 파비콘 등)
    location /public/ {
        proxy_pass http://nextjs_backend;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        add_header X-Content-Type-Options nosniff;
        access_log off;
    }

    # 이미지 파일 최적화
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
        proxy_pass http://nextjs_backend;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        add_header X-Content-Type-Options nosniff;
        access_log off;
    }

    # API 라우트 (캐시하지 않음)
    location /api/ {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API는 캐시하지 않음
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    # robots.txt, sitemap.xml 등
    location ~* \.(txt|xml)$ {
        proxy_pass http://nextjs_backend;
        expires 1h;
        add_header Cache-Control "public";
    }

    # 헬스체크 엔드포인트
    location /health {
        proxy_pass http://nextjs_backend;
        access_log off;
    }

    # 보안: 숨겨진 파일 접근 차단
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 보안: 백업 파일 접근 차단
    location ~* \.(bak|backup|old|orig|save|swp|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 에러 페이지 설정
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # 404 에러를 Next.js로 전달 (동적 라우팅 지원)
    error_page 404 = @nextjs;
    location @nextjs {
        proxy_pass http://nextjs_backend;
    }
} 